kubectl config --kubeconfig=kubconfig view # to get info about kubeconfig 
kubectl config current-context             # check which one conffig do you use 
export KUBECONFIG=~/.kube/kubconfig'.      # add config by default  
oc patch daemonset/dns-default -n openshift-dns --type='json' --patch "$(cat ose-dns-default-patch-changed.yaml)" # add static record to dns 
kubectl config set-context --current --user=admin # for example change context to admin
oc login --token uqiueriuqwfhqf                   # login by token 
kubectl version --short # show version for kubernetes cluster and kubectl version in short output
files ca.crt ca.key in dir /etc/kubernetes/pki used for sign certificate user 
kubectl config set-cluster k8s-solution_auto-dev-pub --server=https://xx.xx.xx.xx:6443 # add cluster 
kubectl label nodes <your-node-name> disktype=ssd # set label for your nodes 
kubectl label ns label-ns test-label=yes # set new label for ns 
kubectl api-resources --sort-by name -o wide | grep serviceaccount # get verbs and resources for kubernetes
docker image ls --digests <your private registry url>/k8s/etcd
oc create secret docker-registry <name registry> --docker-server=<your private registry>--docker-username=<login your registry> --docker-password=<password for registry>
skopeo --override-os linux copy --preserve-digests docker://bitnami/etcd docker://<your private registry>k8s/etcd # copy image from docker hub to private 
oc whoami --show-console # show console url
oc edit console.config.openshift.io cluster 
kubectl apply -f -R . # apply all manifests in current dir 
kubectl api-resources # to get all resources
kubectl get events -n <namespace> --sort-by='.lastTimestamp' # get events by time 
oc get project --selector <key>=<value>  # show namespaces with label 
etcdctl get / --prefix --keys-only  # show all keys 
etcdctl get /kubernetes.io/configmaps/openshift-etcd/configmap-etcd-defrag # get details about key 
oc get node   --selector='apps.kubernetes.io/service=prometheus-istio' # to get nodes qwith selector
kubectl auth can-i create clusterrole # check what can do user sa 
https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/ ### debugging dns 
### delete pods one by one ###
PODS_COREDNS=$(kubectl get pods   --selector=k8s-app=kube-dns -n kube-system  | awk '{print $1}') # get pods with label 
for i in $PODS_COREDNS; do kubectl delete pod $i -n kube-system; done
### delete pods one by one ###
chroot /host # chroot to node from debug node  
