kubectl create sa dev-pub-admin # create service account
kubectl get secrets | grep dev-pub-admin # get secret for created service account 
kubectl describe secret dev-pub-admin-token-tttc5 # do describe token 
kubectl config set-credentials dev-pub-admin-user --token=<token from secret sa> # set credentials for new user and set token from command above
kubectl config set-cluster dev-pub-cluster --server=https://master-01.k8s.dev.cloud:6443 --insecure-skip-tls-verify=true # add new cluster with url cluster 
kubectl config set-context dev-pub-admin-context --cluster=dev-pub-cluster --user=dev-pub-admin-user # add new context to kubeconfig 
kubectl create clusterrolebinding crb_dev-pub-admin-cr_dev-pub-admin-sa --clusterrole=dev-pub-admin --serviceaccount=default:dev-pub-admin # create clusterrolebinding to link sa and cluster role 
--kubeconfig string # path to kubeconfig 

----------------------------------------------------------------------------------------------------------------------------------------------------------
### how to create new kubeconfig ###
before create new kubeconfig do not forget to create  cluster role and clusterrolebinding to link cluster role and sa

kubectl create sa dev-pub-admin                   # create service account
kubectl get secrets | grep dev-pub-admin          # get secret for created service account 
kubectl describe secret dev-pub-admin-token-tttc5 # do describe token 
kubectl config --kubeconfig=new-kubeconfig set-cluster ift-new-config --server=https://api.k8s.<cloud-url>:6443 --insecure-skip-tls-verify=true
kubectl config --kubeconfig=new-kubeconfig set-credentials dev-pub-admin-ift --token=$(cat token-dev-pub-admin)
kubectl config --kubeconfig=new-kubeconfig set-context ift-context --cluster=ift-new-config --user=dev-pub-admin-ift
echo $KUBECONFIG                                  # check which one kubeconfig do you use 
KUBECONFIG=ift-test                               # set new kubeconfig 
kubectl config view                               # determine which one context do you need 
kubectl config use-context ift-context            # switch to new context
kubectl get ns                                    # check that it works fine


----------------------------------------------------------------------------------------------------------------------------------------------------------
### new version how to create kubeconfig ###
k create ns vlku5 ### create ns 
k create sa kubeconfig-sa  -n vlku5 ### create sa
k apply -f kubeconfig-sa-secret.yaml ### apply template with secret
---
apiVersion: v1
kind: Secret
metadata:
  name: kubeconfig-sa-token
  namespace: vlku5
  annotations:
    kubernetes.io/service-account.name: kubeconfig-sa
type: kubernetes.io/service-account-token
---
TOKEN=`kubectl -n vlku5 get secret kubeconfig-sa-token -o jsonpath='{.data.token}' | base64 --decode` ### get token to var 

kubectl describe secret kubeconfig-sa-token -n vlku5 ### or do describe secret and you'll get already decode token

touch my-kubeconfig and put example below 
---
        apiVersion: v1
        clusters:
        - cluster:
            insecure-skip-tls-verify: true
            server: https://api.<fqdn>:6443
          name: https://api.<fqdn>:6443
        contexts:
        - context:
            cluster: https://api.<fqdn>:6443
            namespace: myexample
            user: myexample-sa
          name: default
        current-context: default
        kind: Config
        preferences: {}
        users:
        - name: myexample-sa
          user:
            token: <token>
---
token should be from var TOKEN
server cluster and  name for your cluster ###  you may get it with command -> kubectl cluster-info

kubectl get pods --kubeconfig=my-kubeconfig ### how to check your kubeconfig
